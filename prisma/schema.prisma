generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String?
    startTime   DateTime
    endTime     DateTime
    location    String?
    color       String?  @default("bg-blue-500")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attendees Json?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    userCalendarId String?
    userCalendar   UserCalendar? @relation(fields: [userCalendarId], references: [id], onDelete: SetNull)


    @@index([userId, startTime])
}

model UserCalendar {
    id        String @id @default(cuid())
    name      String
    color     String @default("bg-blue-600")
    isVisible Boolean @default(true)
    userId    String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    events    Event[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, name])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    events        Event[]
    userCalendars UserCalendar[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}